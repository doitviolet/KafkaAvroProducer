/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafkaProducer;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StateSales extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3585233433494470036L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StateSales\",\"namespace\":\"com.kafkaProducer\",\"fields\":[{\"name\":\"customerid\",\"type\":\"string\",\"doc\":\"Id of the customer\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the customer\"},{\"name\":\"street\",\"type\":\"string\",\"doc\":\"The street address\"},{\"name\":\"city\",\"type\":\"string\",\"doc\":\"The city address\"},{\"name\":\"state\",\"type\":\"string\",\"doc\":\"The state address\"},{\"name\":\"zip\",\"type\":\"string\",\"doc\":\"The zip code address\"},{\"name\":\"salesprice\",\"type\":\"float\",\"doc\":\"The sales price\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in seconds\"}],\"doc:\":\"A basic schema for storing state sales\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Id of the customer */
  @Deprecated public java.lang.CharSequence customerid;
  /** The name of the customer */
  @Deprecated public java.lang.CharSequence name;
  /** The street address */
  @Deprecated public java.lang.CharSequence street;
  /** The city address */
  @Deprecated public java.lang.CharSequence city;
  /** The state address */
  @Deprecated public java.lang.CharSequence state;
  /** The zip code address */
  @Deprecated public java.lang.CharSequence zip;
  /** The sales price */
  @Deprecated public float salesprice;
  /** Unix epoch time in seconds */
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StateSales() {}

  /**
   * All-args constructor.
   * @param customerid Id of the customer
   * @param name The name of the customer
   * @param street The street address
   * @param city The city address
   * @param state The state address
   * @param zip The zip code address
   * @param salesprice The sales price
   * @param timestamp Unix epoch time in seconds
   */
  public StateSales(java.lang.CharSequence customerid, java.lang.CharSequence name, java.lang.CharSequence street, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence zip, java.lang.Float salesprice, java.lang.Long timestamp) {
    this.customerid = customerid;
    this.name = name;
    this.street = street;
    this.city = city;
    this.state = state;
    this.zip = zip;
    this.salesprice = salesprice;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerid;
    case 1: return name;
    case 2: return street;
    case 3: return city;
    case 4: return state;
    case 5: return zip;
    case 6: return salesprice;
    case 7: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: street = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: state = (java.lang.CharSequence)value$; break;
    case 5: zip = (java.lang.CharSequence)value$; break;
    case 6: salesprice = (java.lang.Float)value$; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerid' field.
   * @return Id of the customer
   */
  public java.lang.CharSequence getCustomerid() {
    return customerid;
  }

  /**
   * Sets the value of the 'customerid' field.
   * Id of the customer
   * @param value the value to set.
   */
  public void setCustomerid(java.lang.CharSequence value) {
    this.customerid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The name of the customer
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The name of the customer
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return The street address
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * The street address
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The city address
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * The city address
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The state address
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * The state address
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'zip' field.
   * @return The zip code address
   */
  public java.lang.CharSequence getZip() {
    return zip;
  }

  /**
   * Sets the value of the 'zip' field.
   * The zip code address
   * @param value the value to set.
   */
  public void setZip(java.lang.CharSequence value) {
    this.zip = value;
  }

  /**
   * Gets the value of the 'salesprice' field.
   * @return The sales price
   */
  public java.lang.Float getSalesprice() {
    return salesprice;
  }

  /**
   * Sets the value of the 'salesprice' field.
   * The sales price
   * @param value the value to set.
   */
  public void setSalesprice(java.lang.Float value) {
    this.salesprice = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Unix epoch time in seconds
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Unix epoch time in seconds
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new StateSales RecordBuilder.
   * @return A new StateSales RecordBuilder
   */
  public static com.kafkaProducer.StateSales.Builder newBuilder() {
    return new com.kafkaProducer.StateSales.Builder();
  }

  /**
   * Creates a new StateSales RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StateSales RecordBuilder
   */
  public static com.kafkaProducer.StateSales.Builder newBuilder(com.kafkaProducer.StateSales.Builder other) {
    return new com.kafkaProducer.StateSales.Builder(other);
  }

  /**
   * Creates a new StateSales RecordBuilder by copying an existing StateSales instance.
   * @param other The existing instance to copy.
   * @return A new StateSales RecordBuilder
   */
  public static com.kafkaProducer.StateSales.Builder newBuilder(com.kafkaProducer.StateSales other) {
    return new com.kafkaProducer.StateSales.Builder(other);
  }

  /**
   * RecordBuilder for StateSales instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StateSales>
    implements org.apache.avro.data.RecordBuilder<StateSales> {

    /** Id of the customer */
    private java.lang.CharSequence customerid;
    /** The name of the customer */
    private java.lang.CharSequence name;
    /** The street address */
    private java.lang.CharSequence street;
    /** The city address */
    private java.lang.CharSequence city;
    /** The state address */
    private java.lang.CharSequence state;
    /** The zip code address */
    private java.lang.CharSequence zip;
    /** The sales price */
    private float salesprice;
    /** Unix epoch time in seconds */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafkaProducer.StateSales.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerid)) {
        this.customerid = data().deepCopy(fields()[0].schema(), other.customerid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.zip)) {
        this.zip = data().deepCopy(fields()[5].schema(), other.zip);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.salesprice)) {
        this.salesprice = data().deepCopy(fields()[6].schema(), other.salesprice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StateSales instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafkaProducer.StateSales other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerid)) {
        this.customerid = data().deepCopy(fields()[0].schema(), other.customerid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.zip)) {
        this.zip = data().deepCopy(fields()[5].schema(), other.zip);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.salesprice)) {
        this.salesprice = data().deepCopy(fields()[6].schema(), other.salesprice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'customerid' field.
      * Id of the customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerid() {
      return customerid;
    }

    /**
      * Sets the value of the 'customerid' field.
      * Id of the customer
      * @param value The value of 'customerid'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setCustomerid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.customerid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerid' field has been set.
      * Id of the customer
      * @return True if the 'customerid' field has been set, false otherwise.
      */
    public boolean hasCustomerid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerid' field.
      * Id of the customer
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearCustomerid() {
      customerid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The name of the customer
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * The name of the customer
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The name of the customer
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * The name of the customer
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * The street address
      * @return The value.
      */
    public java.lang.CharSequence getStreet() {
      return street;
    }

    /**
      * Sets the value of the 'street' field.
      * The street address
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.street = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * The street address
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'street' field.
      * The street address
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearStreet() {
      street = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * The city address
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * The city address
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * The city address
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'city' field.
      * The city address
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * The state address
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * The state address
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setState(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.state = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * The state address
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'state' field.
      * The state address
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearState() {
      state = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'zip' field.
      * The zip code address
      * @return The value.
      */
    public java.lang.CharSequence getZip() {
      return zip;
    }

    /**
      * Sets the value of the 'zip' field.
      * The zip code address
      * @param value The value of 'zip'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setZip(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.zip = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'zip' field has been set.
      * The zip code address
      * @return True if the 'zip' field has been set, false otherwise.
      */
    public boolean hasZip() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'zip' field.
      * The zip code address
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearZip() {
      zip = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'salesprice' field.
      * The sales price
      * @return The value.
      */
    public java.lang.Float getSalesprice() {
      return salesprice;
    }

    /**
      * Sets the value of the 'salesprice' field.
      * The sales price
      * @param value The value of 'salesprice'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setSalesprice(float value) {
      validate(fields()[6], value);
      this.salesprice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'salesprice' field has been set.
      * The sales price
      * @return True if the 'salesprice' field has been set, false otherwise.
      */
    public boolean hasSalesprice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'salesprice' field.
      * The sales price
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearSalesprice() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Unix epoch time in seconds
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Unix epoch time in seconds
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder setTimestamp(long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Unix epoch time in seconds
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Unix epoch time in seconds
      * @return This builder.
      */
    public com.kafkaProducer.StateSales.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public StateSales build() {
      try {
        StateSales record = new StateSales();
        record.customerid = fieldSetFlags()[0] ? this.customerid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.street = fieldSetFlags()[2] ? this.street : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.state = fieldSetFlags()[4] ? this.state : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.zip = fieldSetFlags()[5] ? this.zip : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.salesprice = fieldSetFlags()[6] ? this.salesprice : (java.lang.Float) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
